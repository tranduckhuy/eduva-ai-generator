"""
Performance test using the OPTIMIZED original VideoGenerator
"""
import asyncio
import json
import os
import logging
import psutil
import time
from datetime import datetime
from src.services.video_generator import VideoGenerator  # Using the optimized original
from src.services.tts_service import estimate_speech_duration

logging.basicConfig(level=logging.INFO)

from dotenv import load_dotenv
load_dotenv()

def get_memory_usage():
    """Get current memory usage in MB"""
    process = psutil.Process(os.getpid())
    return process.memory_info().rss / 1024 / 1024

async def test_optimized_performance():
    """Test with the OPTIMIZED VideoGenerator using realistic data"""
    
    # Real-world lesson data with longer TTS scripts

    lesson_data = {
        "slides": [
            {
                "slide_id": 1,
                # "title": "Gi·ªõi thi·ªáu v·ªÅ Machine Learning Gi·ªõi thi·ªáu v·ªÅ Machine Learning Gi·ªõi thi·ªáu v·ªÅ Machine Learning",
                "title": "Gi·ªõi thi·ªáu v·ªÅ Machine Learning",
                "content": [
                    "Machine Learning l√† g√¨?",
                    "- ·ª®ng d·ª•ng trong ƒë·ªùi s·ªëng",
                    "- C√°c lo·∫°i ML: Supervised, Unsupervised, Reinforcement Learning C√°c lo·∫°i ML: Supervised, Unsupervised, Reinforcement Learning  C√°c lo·∫°i ML: Supervised, Unsupervised, Reinforcement Learning",
                    "C√°c lo·∫°i ML: Supervised, Unsupervised, Reinforcement Learning C√°c lo·∫°i ML: Supervised, Unsupervised, Reinforcement Learning  C√°c lo·∫°i ML: Supervised, Unsupervised, Reinforcement Learning",
                    "C√°c lo·∫°i ML: Supervised, Unsupervised, Reinforcement Learning C√°c lo·∫°i ML: Supervised, Unsupervised, Reinforcement Learning  C√°c lo·∫°i ML: Supervised, Unsupervised, Reinforcement Learning",
                    "C√°c lo·∫°i ML: Supervised, Unsupervised, Reinforcement Learning C√°c lo·∫°i ML: Supervised, Unsupervised, Reinforcement Learning  C√°c lo·∫°i ML: Supervised, Unsupervised, Reinforcement Learning",
                ],
                # "tts_script": "Ch√†o m·ª´ng c√°c b·∫°n ƒë·∫øn v·ªõi kh√≥a h·ªçc Machine Learning cƒÉn b·∫£n. Machine Learning hay H·ªçc m√°y l√† m·ªôt nh√°nh c·ªßa tr√≠ tu·ªá nh√¢n t·∫°o cho ph√©p m√°y t√≠nh h·ªçc v√† ƒë∆∞a ra quy·∫øt ƒë·ªãnh t·ª´ d·ªØ li·ªáu m√† kh√¥ng c·∫ßn l·∫≠p tr√¨nh c·ª• th·ªÉ cho t·ª´ng t√°c v·ª•. Trong cu·ªôc s·ªëng h√†ng ng√†y, ch√∫ng ta th∆∞·ªùng xuy√™n ti·∫øp x√∫c v·ªõi Machine Learning qua c√°c h·ªá th·ªëng g·ª£i √Ω tr√™n Netflix, nh·∫≠n di·ªán khu√¥n m·∫∑t tr√™n Facebook, hay tr·ª£ l√Ω ·∫£o nh∆∞ Siri v√† Google Assistant.",
                "tts_script": "Ch√†o m·ª´ng c√°c b·∫°n.",
                "image_keywords": ["machine learning", "AI", "artificial intelligence", "technology"]
            },
            # {
            #     "slide_id": 2,
            #     "title": "D·ªØ li·ªáu v√† Ti·ªÅn x·ª≠ l√Ω",
            #     "content": [
            #         "T·∫ßm quan tr·ªçng c·ªßa d·ªØ li·ªáu",
            #         "L√†m s·∫°ch d·ªØ li·ªáu",
            #         "Feature Engineering",
            #         "Train/Validation/Test Split"
            #     ],
            #     # "tts_script": "D·ªØ li·ªáu l√† y·∫øu t·ªë quan tr·ªçng nh·∫•t trong Machine Learning, c√≥ c√¢u n√≥i r·∫±ng 'garbage in, garbage out' - d·ªØ li·ªáu k√©m ch·∫•t l∆∞·ª£ng s·∫Ω cho ra m√¥ h√¨nh k√©m ch·∫•t l∆∞·ª£ng. Qu√° tr√¨nh ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu bao g·ªìm l√†m s·∫°ch d·ªØ li·ªáu b·∫±ng c√°ch lo·∫°i b·ªè gi√° tr·ªã thi·∫øu, x·ª≠ l√Ω outliers, v√† chu·∫©n h√≥a format. Feature Engineering l√† ngh·ªá thu·∫≠t t·∫°o ra c√°c ƒë·∫∑c tr∆∞∆°ng m·ªõi t·ª´ d·ªØ li·ªáu th√¥ ƒë·ªÉ c·∫£i thi·ªán hi·ªáu su·∫•t m√¥ h√¨nh.",
            #     "tts_script": "Ch√†o m·ª´ng c√°c b·∫°n.",
            #     "image_keywords": ["data processing", "data cleaning", "feature engineering", "dataset"]
            # },
            # {
            #     "slide_id": 3,
            #     "title": "Linear Regression",
            #     "content": [
            #         "Kh√°i ni·ªám c∆° b·∫£n",
            #         "Cost Function",
            #         "Gradient Descent",
            #         "V√≠ d·ª• th·ª±c t·∫ø"
            #     ],
            #     # "tts_script": "Linear Regression l√† thu·∫≠t to√°n Machine Learning c∆° b·∫£n nh·∫•t, ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ d·ª± ƒëo√°n gi√° tr·ªã li√™n t·ª•c d·ª±a tr√™n m·ªëi quan h·ªá tuy·∫øn t√≠nh gi·ªØa input v√† output. M√¥ h√¨nh n√†y t√¨m c√°ch v·∫Ω m·ªôt ƒë∆∞·ªùng th·∫≥ng t·ªët nh·∫•t qua c√°c ƒëi·ªÉm d·ªØ li·ªáu ƒë·ªÉ minimizing sai s·ªë. Cost Function, th∆∞·ªùng l√† Mean Squared Error, ƒëo l∆∞·ªùng ƒë·ªô ch√≠nh x√°c c·ªßa m√¥ h√¨nh.",
            #     "tts_script": "Ch√†o m·ª´ng c√°c b·∫°n.",
            #     "image_keywords": ["linear regression", "mathematics", "graph", "prediction"]
            # },
            # {
            #     "slide_id": 4,
            #     "title": "Classification v√† Decision Trees",
            #     "content": [
            #         "B√†i to√°n ph√¢n lo·∫°i",
            #         "Decision Trees ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o",
            #         "Entropy v√† Information Gain",
            #         "Overfitting v√† Pruning"
            #     ],
            #     "tts_script": "Classification l√† lo·∫°i b√†i to√°n Machine Learning d·ª± ƒëo√°n nh√£n ho·∫∑c danh m·ª•c cho d·ªØ li·ªáu ƒë·∫ßu v√†o, kh√°c v·ªõi regression d·ª± ƒëo√°n gi√° tr·ªã li√™n t·ª•c. Decision Trees l√† m·ªôt thu·∫≠t to√°n classification tr·ª±c quan, ho·∫°t ƒë·ªông gi·ªëng nh∆∞ vi·ªác ƒë∆∞a ra quy·∫øt ƒë·ªãnh trong ƒë·ªùi th·ª±c b·∫±ng c√°ch ƒë·∫∑t m·ªôt chu·ªói c√¢u h·ªèi yes/no.",
            #     "image_keywords": ["decision tree", "classification", "flowchart", "data science"]
            # },
            # {
            #     "slide_id": 5,
            #     "title": "Random Forest v√† Ensemble Methods",
            #     "content": [
            #         "Wisdom of Crowds",
            #         "Random Forest Algorithm",
            #         "Bagging vs Boosting",
            #         "Feature Importance"
            #     ],
            #     "tts_script": "Ensemble Methods d·ª±a tr√™n nguy√™n l√Ω 'wisdom of crowds' - nhi·ªÅu m√¥ h√¨nh y·∫øu k·∫øt h·ª£p l·∫°i c√≥ th·ªÉ t·∫°o ra m·ªôt m√¥ h√¨nh m·∫°nh. Random Forest l√† m·ªôt trong nh·ªØng thu·∫≠t to√°n ensemble ph·ªï bi·∫øn nh·∫•t, k·∫øt h·ª£p nhi·ªÅu Decision Trees ƒë∆∞·ª£c training tr√™n c√°c subset kh√°c nhau c·ªßa d·ªØ li·ªáu.",
            #     "image_keywords": ["random forest", "ensemble", "trees", "algorithm"]
            # }
        ]
    }
    
    # Calculate expected metrics
    total_estimated_duration = sum(estimate_speech_duration(slide['tts_script']) for slide in lesson_data['slides'])
    
    video_generator = VideoGenerator()
    video_generator.slide_processor.image_generator.set_template("soft_modern_edu")  # Use the optimized beautiful template


    base_dir = os.path.dirname(os.path.abspath(__file__))
    output_dir = os.path.join(base_dir, "temp_videos")
    os.makedirs(output_dir, exist_ok=True)
    
    output_path = os.path.join(output_dir, f"optimized_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4")
    
    # Detailed timing tracking
    memory_tracking = []
    
    def track_memory():
        memory_tracking.append({
            'time': time.time(),
            'memory_mb': get_memory_usage()
        })
    
    try:
        print("üöÄ OPTIMIZED VIDEOGENERATOR PERFORMANCE TEST")
        print("=" * 60)
        print(f"üìä Test Configuration:")
        print(f"   - Slides: {len(lesson_data['slides'])}")
        print(f"   - Estimated total duration: {total_estimated_duration:.1f} seconds ({total_estimated_duration/60:.1f} minutes)")
        print(f"   - Average TTS length: {sum(len(s['tts_script']) for s in lesson_data['slides']) / len(lesson_data['slides']):.0f} characters")
        print(f"   - Max workers: {video_generator.max_workers_optimized}")
        print(f"   - Batch size: {video_generator.batch_size_optimized}")
        print(f"   - Video FPS: {video_generator.video_fps}")
        print(f"   - Image resolution: {video_generator.image_resolution}")
        print(f"   - Output: {output_path}")
        print()
        
        track_memory()
        overall_start = time.time()
        
        print("üé¨ Starting OPTIMIZED video generation with BEAUTIFUL TEMPLATES...")
        print(f"   - Available templates: {video_generator.slide_processor.image_generator.get_available_templates().keys()}")
        print(f"   - Starting template: {video_generator.slide_processor.image_generator.template_manager.current_template}")
        print()
        # Use the optimized original VideoGenerator
        result = await video_generator.generate_lesson_video(lesson_data, output_path, base_dir)
        
        total_time = time.time() - overall_start
        track_memory()
        
        # Analyze results
        print("\n‚úÖ OPTIMIZED GENERATION COMPLETED")
        print("=" * 60)
        
        # Timing analysis
        print("‚è±Ô∏è  Timing Analysis:")
        print(f"   - Total time: {total_time:.1f} seconds ({total_time/60:.1f} minutes)")
        print(f"   - Time per slide: {total_time/len(lesson_data['slides']):.1f} seconds")
        print(f"   - Speed ratio: {total_estimated_duration/total_time:.2f}x (audio duration / generation time)")
        
        # Memory analysis
        if memory_tracking:
            memories = [m['memory_mb'] for m in memory_tracking]
            print(f"\nüíæ Memory Analysis:")
            print(f"   - Initial: {memories[0]:.1f} MB")
            print(f"   - Peak: {max(memories):.1f} MB")
            print(f"   - Final: {memories[-1]:.1f} MB")
            print(f"   - Memory increase: {max(memories) - memories[0]:.1f} MB")
            print(f"   - Memory per slide: {(max(memories) - memories[0])/len(lesson_data['slides']):.1f} MB")
        
        # File analysis
        if os.path.exists(result):
            file_size_mb = os.path.getsize(result) / (1024 * 1024)
            print(f"\nüìÅ Output Analysis:")
            print(f"   - File size: {file_size_mb:.1f} MB")
            print(f"   - Compression ratio: {file_size_mb/total_estimated_duration:.2f} MB/second")
            print(f"   - File exists: ‚úÖ")
        else:
            print(f"\n‚ùå Output file not found: {result}")
            return False
        
        # Performance rating
        print(f"\nüéØ Performance Rating:")
        
        # Speed metrics
        slides_per_minute = len(lesson_data['slides']) / (total_time / 60)
        content_speed = total_estimated_duration / total_time
        
        print(f"   - Processing speed: {slides_per_minute:.1f} slides/minute")
        print(f"   - Content generation rate: {content_speed:.2f}x real-time")
        
        # Quality metrics
        if content_speed >= 1.5:
            speed_rating = "üåü Excellent"
        elif content_speed >= 1.0:
            speed_rating = "‚úÖ Good"
        elif content_speed >= 0.5:
            speed_rating = "‚ö†Ô∏è Acceptable"
        else:
            speed_rating = "‚ùå Slow"
            
        if memories and (max(memories) - memories[0]) < 300:
            memory_rating = "üåü Excellent"
        elif memories and (max(memories) - memories[0]) < 500:
            memory_rating = "‚úÖ Good"
        else:
            memory_rating = "‚ö†Ô∏è High memory usage"
        
        print(f"   - Speed: {speed_rating}")
        print(f"   - Memory efficiency: {memory_rating}")
        
        # Performance comparison
        print(f"\nüìà Performance Improvements:")
        print(f"   - Beautiful Templates: 4 different designs cycling automatically")
        print(f"   - Smart Text Wrapping: No more (...) truncation")
        print(f"   - Longer Content Display: 85% of audio time for reading")
        print(f"   - Professional Design: Gradients, shadows, better typography")
        print(f"   - Faster TTS: 1.1x speaking rate vs 1.0x")
        print(f"   - Lower FPS: {video_generator.video_fps} vs 24")
        print(f"   - Faster encoding: ultrafast preset")
        print(f"   - Increased concurrency: {video_generator.max_workers_optimized} vs 2 workers")
        print(f"   - Larger batches: {video_generator.batch_size_optimized} vs 2")
        print(f"   - Optimized images: {video_generator.image_resolution} resolution")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_optimized_performance())
    print("\n" + "="*60)
    print("üéâ OPTIMIZED TEST COMPLETED SUCCESSFULLY!" if success else "üí• OPTIMIZED TEST FAILED!")
    print("="*60)
