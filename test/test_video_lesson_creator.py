import asyncio
import json
from dotenv import load_dotenv
from langchain_core.messages import HumanMessage
from src.agents.lesson_creator.flow import lesson_creator_agent
from src.utils.logger import logger

load_dotenv()


async def test_video_lesson_creator():
    """
    Test h·ªá th·ªëng t·∫°o video b√†i gi·∫£ng v·ªõi c√°c y√™u c·∫ßu m·∫´u
    """
    test_cases = [
        {
            "name": "T·∫°o b√†i gi·∫£ng To√°n",
            "query": "T·∫°o b√†i gi·∫£ng To√°n l·ªõp 10 v·ªÅ h√†m s·ªë b·∫≠c nh·∫•t, bao g·ªìm slide v√† script thuy·∫øt minh"
        },
        {
            "name": "T·∫°o b√†i gi·∫£ng V·∫≠t l√Ω", 
            "query": "C·∫ßn slide V·∫≠t l√Ω l·ªõp 11 v·ªÅ dao ƒë·ªông ƒëi·ªÅu h√≤a, c√≥ v√≠ d·ª• v√† b√†i t·∫≠p"
        }
    ]
    
    config = {"configurable": {"thread_id": "lesson_test_1"}}
    
    for i, test_case in enumerate(test_cases):
        print(f"\n{'='*60}")
        print(f"TEST {i+1}: {test_case['name']}")
        print(f"{'='*60}")
        print(f"Y√™u c·∫ßu: {test_case['query']}")
        print("\nƒêang x·ª≠ l√Ω...")
        
        try:
            input_dict = {
                "messages": [HumanMessage(content=test_case['query'])]
            }
            
            response = await lesson_creator_agent.ainvoke(input_dict, config)
            
            print("\nK·∫øt qu·∫£:")
            print("-" * 40)
            print(response["messages"][-1].content)
            print("-" * 40)
            
        except Exception as e:
            print(f"L·ªói: {str(e)}")
        
        print("\n" + "="*60)


async def interactive_test():
    """
    Test t∆∞∆°ng t√°c v·ªõi h·ªá th·ªëng
    """
    print("üéì H·ªÜ TH·ªêNG T·∫†O VIDEO B√ÄI GI·∫¢NG CHO H·ªåC SINH C·∫§P 3")
    print("=" * 60)
    print("Nh·∫≠p y√™u c·∫ßu c·ªßa b·∫°n (ho·∫∑c 'quit' ƒë·ªÉ tho√°t)")
    print("V√≠ d·ª•: 'T·∫°o b√†i gi·∫£ng To√°n l·ªõp 10 v·ªÅ h√†m s·ªë b·∫≠c nh·∫•t'")
    print("-" * 60)
    
    config = {"configurable": {"thread_id": "interactive_lesson"}}
    
    while True:
        user_input = input("\nüë®‚Äçüè´ Gi√°o vi√™n: ")
        
        if user_input.lower() in ['quit', 'exit', 'tho√°t']:
            print("C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng h·ªá th·ªëng!")
            break
            
        if not user_input.strip():
            continue
            
        try:
            input_dict = {
                "messages": [HumanMessage(content=user_input)]
            }
            
            print("\nü§ñ ƒêang x·ª≠ l√Ω y√™u c·∫ßu...")
            response = await lesson_creator_agent.ainvoke(input_dict, config)
            
            print("\nüéØ Tr·ª£ l√Ω AI:")
            print("-" * 40)
            print(response["messages"][-1].content)
            print("-" * 40)
            
        except Exception as e:
            print(f"‚ùå L·ªói: {str(e)}")


async def test_rag_document_retrieval():
    """Test RAG system v·ªõi truy xu·∫•t t√†i li·ªáu t·ª´ vector store"""
    print("=== Testing RAG Document Retrieval ===")
    
    # Test case 1: Truy xu·∫•t t√†i li·ªáu To√°n h·ªçc
    test_queries = [
        {
            "query": "T·∫°o b√†i gi·∫£ng To√°n l·ªõp 10 v·ªÅ h√†m s·ªë b·∫≠c nh·∫•t, 20 ph√∫t",
            "expected_subject": "To√°n",
            "expected_grade": "l·ªõp 10"
        },
        {
            "query": "C·∫ßn slide V·∫≠t l√Ω l·ªõp 11 v·ªÅ dao ƒë·ªông ƒëi·ªÅu h√≤a v·ªõi v√≠ d·ª•",
            "expected_subject": "V·∫≠t l√Ω", 
            "expected_grade": "l·ªõp 11"
        },
        {
            "query": "H·ªó tr·ª£ t·∫°o video H√≥a h·ªçc l·ªõp 12 v·ªÅ ph·∫£n ·ª©ng axit-baz∆°",
            "expected_subject": "H√≥a h·ªçc",
            "expected_grade": "l·ªõp 12"
        }
    ]
    
    for i, test_case in enumerate(test_queries, 1):
        print(f"\n--- Test Case {i}: {test_case['query']} ---")
        
        try:
            # G·ªçi RAG agent
            config = {"configurable": {"thread_id": f"test_{i}"}}
            input_graph = {"messages": [{"role": "user", "content": test_case["query"]}]}
            
            response = await lesson_creator_agent.ainvoke(input_graph, config)
            
            # Ki·ªÉm tra response structure
            assert "messages" in response, "Response thi·∫øu messages"
            assert len(response["messages"]) > 0, "Messages r·ªóng"
            
            final_message = response["messages"][-1].content
            print(f"‚úì Nh·∫≠n ƒë∆∞·ª£c response: {len(final_message)} characters")
            
            # Ki·ªÉm tra slide_data
            slide_data = response.get("slide_data", {})
            if slide_data:
                print(f"‚úì Slide data generated: {len(slide_data.get('slides', []))} slides")
                
                # Validate lesson_info
                lesson_info = slide_data.get("lesson_info", {})
                if lesson_info:
                    print(f"  - Subject: {lesson_info.get('subject', 'N/A')}")
                    print(f"  - Grade: {lesson_info.get('grade', 'N/A')}")
                    print(f"  - Duration: {lesson_info.get('duration_minutes', 'N/A')} minutes")
            else:
                print("‚ö† No structured slide data generated")
            
            # Ki·ªÉm tra document retrieval
            selected_docs = response.get("selected_documents", [])
            selected_ids = response.get("selected_ids", [])
            
            if selected_docs:
                print(f"‚úì Retrieved {len(selected_docs)} documents from vector store")
                print(f"  - Document IDs: {selected_ids[:3]}...")  # Show first 3 IDs
            else:
                print("‚ö† No documents retrieved from vector store")
            
            print(f"‚úì Test Case {i} PASSED\n")
            
        except Exception as e:
            print(f"‚úó Test Case {i} FAILED: {str(e)}")
            logger.error(f"Test case {i} error: {str(e)}")


async def test_vector_store_connection():
    """Test k·∫øt n·ªëi vector store"""
    print("=== Testing Vector Store Connection ===")
    
    try:
        from src.agents.lesson_creator.tools import retrieve_document
        
        # Test truy xu·∫•t t√†i li·ªáu tr·ª±c ti·∫øp
        test_query = "h√†m s·ªë b·∫≠c nh·∫•t to√°n l·ªõp 10"
        result = retrieve_document.invoke({"query": test_query})
        
        print(f"‚úì Vector store connection successful")
        print(f"  - Retrieved context length: {len(result.get('context_str', ''))}")
        print(f"  - Number of documents: {len(result.get('selected_documents', []))}")
        print(f"  - Document IDs: {result.get('selected_ids', [])}")
        
        return True
        
    except Exception as e:
        print(f"‚úó Vector store connection failed: {str(e)}")
        return False


async def test_structured_output():
    """Test c·∫•u tr√∫c JSON output"""
    print("=== Testing Structured JSON Output ===")
    
    try:
        from src.agents.lesson_creator.tools import create_structured_lesson_content
        
        # Test t·∫°o structured content
        result = create_structured_lesson_content.invoke({
            "topic": "H√†m s·ªë b·∫≠c nh·∫•t",
            "grade_level": "l·ªõp 10", 
            "subject": "To√°n",
            "duration_minutes": 25
        })
        
        # Validate JSON structure
        assert "lesson_info" in result, "Missing lesson_info"
        assert "slides" in result, "Missing slides array"
        
        lesson_info = result["lesson_info"]
        assert "title" in lesson_info, "Missing title"
        assert "subject" in lesson_info, "Missing subject"
        assert "grade" in lesson_info, "Missing grade"
        
        slides = result["slides"]
        assert len(slides) > 0, "Empty slides array"
        
        # Validate first slide structure
        first_slide = slides[0]
        required_fields = ["slide_id", "type", "title", "content", "duration_seconds", "tts_script", "visual_elements"]
        for field in required_fields:
            assert field in first_slide, f"Missing field: {field}"
        
        print(f"‚úì Structured JSON output validated")
        print(f"  - Lesson: {lesson_info['title']}")
        print(f"  - Subject: {lesson_info['subject']}")
        print(f"  - Grade: {lesson_info['grade']}")
        print(f"  - Slides count: {len(slides)}")
        
        return True
        
    except Exception as e:
        print(f"‚úó Structured output test failed: {str(e)}")
        return False


async def main():
    """Ch·∫°y t·∫•t c·∫£ test cases"""
    print("üß™ RAG SYSTEM VALIDATION TEST")
    print("=" * 50)
    
    # Test 1: Vector store connection
    vector_store_ok = await test_vector_store_connection()
    
    # Test 2: Structured output
    structured_output_ok = await test_structured_output()
    
    # Test 3: End-to-end RAG workflow (ch·ªâ ch·∫°y n·∫øu vector store OK)
    if vector_store_ok:
        await test_rag_document_retrieval()
    else:
        print("‚ö† Skipping RAG workflow test due to vector store connection issues")
    
    print("\n" + "=" * 50)
    print("üèÅ TEST SUMMARY:")
    print(f"Vector Store Connection: {'‚úì PASS' if vector_store_ok else '‚úó FAIL'}")
    print(f"Structured Output: {'‚úì PASS' if structured_output_ok else '‚úó FAIL'}")
    print(f"Overall Status: {'‚úì SYSTEM READY' if vector_store_ok and structured_output_ok else '‚ö† NEEDS ATTENTION'}")


if __name__ == "__main__":
    print("Ch·ªçn ch·∫ø ƒë·ªô test:")
    print("1. Test t·ª± ƒë·ªông v·ªõi c√°c tr∆∞·ªùng h·ª£p m·∫´u")
    print("2. Test t∆∞∆°ng t√°c")
    
    choice = input("Nh·∫≠p l·ª±a ch·ªçn (1 ho·∫∑c 2): ")
    
    if choice == "1":
        asyncio.run(test_video_lesson_creator())
    elif choice == "2":
        asyncio.run(interactive_test())
    else:
        print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
    asyncio.run(main())