import asyncio
from dotenv import load_dotenv
from langchain_core.messages import HumanMessage

load_dotenv()
from src.agents.rag_agent_template.flow import rag_agent_template_agent


async def test_video_lesson_creator():
    """
    Test h·ªá th·ªëng t·∫°o video b√†i gi·∫£ng v·ªõi c√°c y√™u c·∫ßu m·∫´u
    """
    test_cases = [
        {
            "name": "T·∫°o b√†i gi·∫£ng To√°n",
            "query": "T·∫°o b√†i gi·∫£ng To√°n l·ªõp 10 v·ªÅ h√†m s·ªë b·∫≠c nh·∫•t, bao g·ªìm slide v√† script thuy·∫øt minh"
        },
        {
            "name": "T·∫°o b√†i gi·∫£ng V·∫≠t l√Ω", 
            "query": "C·∫ßn slide V·∫≠t l√Ω l·ªõp 11 v·ªÅ dao ƒë·ªông ƒëi·ªÅu h√≤a, c√≥ v√≠ d·ª• v√† b√†i t·∫≠p"
        },
        {
            "name": "T·∫°o b√†i gi·∫£ng H√≥a h·ªçc",
            "query": "H·ªó tr·ª£ t·∫°o video H√≥a h·ªçc l·ªõp 12 v·ªÅ ph·∫£n ·ª©ng axit-baz∆°, th·ªùi l∆∞·ª£ng 15 ph√∫t"
        }
    ]
    
    config = {"configurable": {"thread_id": "lesson_test_1"}}
    
    for i, test_case in enumerate(test_cases):
        print(f"\n{'='*60}")
        print(f"TEST {i+1}: {test_case['name']}")
        print(f"{'='*60}")
        print(f"Y√™u c·∫ßu: {test_case['query']}")
        print("\nƒêang x·ª≠ l√Ω...")
        
        try:
            input_dict = {
                "messages": [HumanMessage(content=test_case['query'])]
            }
            
            response = await rag_agent_template_agent.ainvoke(input_dict, config)
            
            print("\nK·∫øt qu·∫£:")
            print("-" * 40)
            print(response["messages"][-1].content)
            print("-" * 40)
            
        except Exception as e:
            print(f"L·ªói: {str(e)}")
        
        print("\n" + "="*60)


async def interactive_test():
    """
    Test t∆∞∆°ng t√°c v·ªõi h·ªá th·ªëng
    """
    print("üéì H·ªÜ TH·ªêNG T·∫†O VIDEO B√ÄI GI·∫¢NG CHO H·ªåC SINH C·∫§P 3")
    print("=" * 60)
    print("Nh·∫≠p y√™u c·∫ßu c·ªßa b·∫°n (ho·∫∑c 'quit' ƒë·ªÉ tho√°t)")
    print("V√≠ d·ª•: 'T·∫°o b√†i gi·∫£ng To√°n l·ªõp 10 v·ªÅ h√†m s·ªë b·∫≠c nh·∫•t'")
    print("-" * 60)
    
    config = {"configurable": {"thread_id": "interactive_lesson"}}
    
    while True:
        user_input = input("\nüë®‚Äçüè´ Gi√°o vi√™n: ")
        
        if user_input.lower() in ['quit', 'exit', 'tho√°t']:
            print("C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng h·ªá th·ªëng!")
            break
            
        if not user_input.strip():
            continue
            
        try:
            input_dict = {
                "messages": [HumanMessage(content=user_input)]
            }
            
            print("\nü§ñ ƒêang x·ª≠ l√Ω y√™u c·∫ßu...")
            response = await rag_agent_template_agent.ainvoke(input_dict, config)
            
            print("\nüéØ Tr·ª£ l√Ω AI:")
            print("-" * 40)
            print(response["messages"][-1].content)
            print("-" * 40)
            
        except Exception as e:
            print(f"‚ùå L·ªói: {str(e)}")


if __name__ == "__main__":
    print("Ch·ªçn ch·∫ø ƒë·ªô test:")
    print("1. Test t·ª± ƒë·ªông v·ªõi c√°c tr∆∞·ªùng h·ª£p m·∫´u")
    print("2. Test t∆∞∆°ng t√°c")
    
    choice = input("Nh·∫≠p l·ª±a ch·ªçn (1 ho·∫∑c 2): ")
    
    if choice == "1":
        asyncio.run(test_video_lesson_creator())
    elif choice == "2":
        asyncio.run(interactive_test())
    else:
        print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")