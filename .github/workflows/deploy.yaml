name: Deploy Eduva AI Generator Image

on:
  workflow_run:
    workflows: ["Publish Eduva AI Generator Image"]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy AI Generator Worker
    runs-on: self-hosted

    # Only run if the previous workflow run was successful or if manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Compose environment
        run: |
          echo "Setting up Docker Compose environment..."
          echo "RABBITMQ_URI=${{ secrets.RABBITMQ_URI }}" >> .env
          echo "AI_TASK_QUEUE=${{ secrets.AI_TASK_QUEUE }}" >> .env
          echo "MAIN_EXCHANGE=${{ secrets.MAIN_EXCHANGE }}" >> .env
          echo "ROUTING_KEY=${{ secrets.ROUTING_KEY }}" >> .env
          echo "DLQ_QUEUE=${{ secrets.DLQ_QUEUE }}" >> .env
          echo "DLQ_EXCHANGE=${{ secrets.DLQ_EXCHANGE }}" >> .env
          echo "DLQ_ROUTING_KEY=${{ secrets.DLQ_ROUTING_KEY }}" >> .env
          echo "DLQ_MONITORING_ENABLED=${{ secrets.DLQ_MONITORING_ENABLED }}" >> .env
          echo "DLQ_ALERT_THRESHOLD=${{ secrets.DLQ_ALERT_THRESHOLD }}" >> .env
          echo "MAX_RETRIES=${{ secrets.MAX_RETRIES }}" >> .env
          echo "AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" >> .env
          echo "AZURE_INPUT_CONTAINER=${{ secrets.AZURE_INPUT_CONTAINER }}" >> .env
          echo "AZURE_OUTPUT_CONTAINER=${{ secrets.AZURE_OUTPUT_CONTAINER }}" >> .env
          echo "BACKEND_API_BASE_URL=${{ secrets.BACKEND_API_BASE_URL }}" >> .env
          echo "BACKEND_API_KEY=${{ secrets.BACKEND_API_KEY }}" >> .env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env
          echo "DEFAULT_MODEL=${{ secrets.DEFAULT_MODEL }}" >> .env
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" >> .env
          echo "GOOGLE_CLOUD_PROJECT=${{ secrets.GOOGLE_CLOUD_PROJECT }}" >> .env
          echo "GOOGLE_CLOUD_LOCATION=${{ secrets.GOOGLE_CLOUD_LOCATION }}" >> .env
          echo "IMAGE_GENERATION_MODEL=${{ secrets.IMAGE_GENERATION_MODEL }}" >> .env
          echo "UNSPLASH_ACCESS_KEY=${{ secrets.UNSPLASH_ACCESS_KEY }}" >> .env
          echo "PEXELS_ACCESS_KEY=${{ secrets.PEXELS_ACCESS_KEY }}" >> .env
          echo "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}" >> .env
          echo "PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }}" >> .env
          echo "Docker Compose environment setup completed."

      - name: Deploy with Docker Compose
        run: |
          echo "Pulling latest Docker images..."
          docker compose pull
          echo "Recreating containers with latest images..."
          docker compose -f docker-compose.yaml up --force-recreate --build -d
          echo "Cleaning up unused Docker images..."
          docker image prune -f
          echo "Deployment completed successfully."
